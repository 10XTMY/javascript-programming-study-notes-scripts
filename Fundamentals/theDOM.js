// Document Object Model

// const para = document.querySelector('p'); // selects first paragraph element
// console.log(para.innerHTML);
//
// const errorMessage = document.querySelector('div.error'); // selects first div with class of error
// console.log(errorMessage.innerHTML);

// get element by ID
const title = document.getElementById('page-title');
console.log(title.textContent);

// get element by class name
// const errors = document.getElementsByClassName('error'); // returns a node list
// console.log(errors);
// console.log(errors[1]); // cannot perform forEach on a html collection

// get elements by tag name
// const paragraphs = document.getElementsByTagName('p');
// console.log(paragraphs[1]);

// Editing Elements
const firstParagraph = document.querySelector('p');
console.log(firstParagraph.innerText);
firstParagraph.innerText = 'tom is awesome';
firstParagraph.innerText += ' and handsome';

const paras = document.querySelectorAll('p'); // node lists can be cycled for each

paras.forEach (paragraph => {
    console.log(paragraph.innerText);
})

// Editing the HTML

const content = document.querySelector('.content');
console.log(content.innerHTML);

content.innerHTML = '<h2>this is a new headline</h2>';

// Scenario: received an array of people from a database
// Objective: generate html snipper for each person
//              output to web page

const people = ['tom', 'john', 'sara'];

people.forEach(person => {
    content.innerHTML += `<p>${person}</p>`;
});

// Editing attributes of an element
const link = document.querySelector('a');
console.log(link.getAttribute('href'));
link.setAttribute('href', 'https://www.bing.com');
link.innerText = 'link to bing';
console.log(link.getAttribute('href'));

const msg = document.querySelector('p');
console.log(msg.getAttribute('class'));
msg.setAttribute('class', 'success');
console.log(msg.getAttribute('class'));

// Editing a style
// msg.setAttribute('style', 'color: red;'); // this overwrites what is already there

// add styles without overwriting original
msg.style.color = 'blue';
msg.style.backgroundColor = 'yellow';
msg.style.fontSize = '1.5rem';

// Add or Remove classes from elements
const errorBoxDiv = document.getElementById('error-success-box');
const messageOutputBox = errorBoxDiv.querySelectorAll('p');

messageOutputBox.forEach(message => {
    if(message.textContent.includes('fail')) {
        message.classList.add('error');
    } else if(message.textContent.includes('success')) {
        message.classList.add('success');
    }
});

// toggle classes
const titleA = document.querySelector('.title');
titleA.classList.toggle('test'); // adds it if not exist


// Node Trees (parent, children, siblings)
// usually content will be generated by backend CMS
// so you may need to select a main item and edit its children
const article = document.querySelector('article');

articleChildren = Array.from(article.children);
console.log(articleChildren)

articleChildren.forEach((child) => {
    child.style.fontWeight = '900';
    child.classList.add('article-element');
});

// traversing the tree
console.log(article.parentElement);
console.log(article.parentElement.parentElement);
console.log(article.nextElementSibling);
console.log(article.previousElementSibling);
console.log(article.previousSibling);
console.log(article.nextSibling);
// chaining
console.log(article.nextElementSibling.parentElement.children);

// detect copy action
const copy = document.querySelector('.copy-me');
copy.addEventListener('copy', () => {
    console.log('copied');
});

// detect mouse movement
const box = document.querySelector('.box');
box.addEventListener('mousemove', (e) => {
    box.innerText = `${e.offsetX}, ${e.offsetY}`;
});

// detect page scroll event
document.addEventListener('wheel', e => {
    console.log(e.pageX, e.pageY);
});
